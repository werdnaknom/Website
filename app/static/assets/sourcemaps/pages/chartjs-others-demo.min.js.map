{"version":3,"sources":["pages/chartjs-others-demo.js"],"names":["ChartjsOtherDemo","_classCallCheck","this","isDarkSkin","Looper","skin","gray","getColors","borderColor","colors","white","init","dataLabellingChart","comboBarLineChart","bubbleChart","polarAreaChart","pieChart","doughnutChart","Math","random","round","data","labels","datasets","type","label","backgroundColor","Chart","helpers","color","brand","purple","alpha","rgbString","randomScalingFactor","green","teal","plugins","register","afterDatasetsDraw","chartInstance","easing","ctx","chart","forEach","dataset","i","id","meta","getDatasetMeta","hidden","element","index","fillStyle","font","fontString","dataString","toString","textAlign","textBaseline","position","tooltipPosition","fillText","x","y","fontSize","canvas","$","getContext","options","responsive","legend","display","title","text","borderWidth","fill","red","tooltips","mode","intersect","animation","duration","r","abs","randomScaling","hexToRgba","yellow","indigo","scale","ticks","beginAtZero","backdropColor","getLightColor","reverse","animateRotate","animateScale","PolarArea","document","on"],"mappings":"uZAGMA,4BAEJ,SAAAA,IAAeC,gBAAAC,KAAAF,GACbE,KAAKC,WAA6B,SAAhBC,OAAOC,KACzBH,KAAKI,KAAOF,OAAOG,UAAU,QAC7BL,KAAKM,YAAcN,KAAKC,WAAaD,KAAKI,KAAK,KAAOF,OAAOK,OAAOC,MAEpER,KAAKS,2DAMLT,KAAKU,qBACLV,KAAKW,oBACLX,KAAKY,cACLZ,KAAKa,iBACLb,KAAKc,WACLd,KAAKe,8DAIL,OAAwB,GAAhBC,KAAKC,SAAiB,GAAO,GAAOD,KAAKE,MAAsB,IAAhBF,KAAKC,kDAI5D,OAAOD,KAAKE,MAAsB,IAAhBF,KAAKC,2CAIvB,MAAO,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,oDAIrF,IAAME,EAAO,CACXC,OAAQ,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACnDC,SAAU,CAAC,CACTC,KAAM,MACNC,MAAO,YACPC,gBAAiBC,MAAMC,QAAQC,MAAMzB,OAAOK,OAAOqB,MAAMC,QAAQC,MAAM,IAAKC,YAC5EzB,YAAaJ,OAAOK,OAAOqB,MAAMC,OACjCV,KAAM,CACJnB,KAAKgC,sBACLhC,KAAKgC,sBACLhC,KAAKgC,sBACLhC,KAAKgC,sBACLhC,KAAKgC,sBACLhC,KAAKgC,sBACLhC,KAAKgC,wBAEN,CACDV,KAAM,OACNC,MAAO,YACPC,gBAAiBC,MAAMC,QAAQC,MAAMzB,OAAOK,OAAOqB,MAAMK,OAAOH,MAAM,IAAKC,YAC3EzB,YAAaJ,OAAOK,OAAOqB,MAAMK,MACjCd,KAAM,CACJnB,KAAKgC,sBACLhC,KAAKgC,sBACLhC,KAAKgC,sBACLhC,KAAKgC,sBACLhC,KAAKgC,sBACLhC,KAAKgC,sBACLhC,KAAKgC,wBAEN,CACDV,KAAM,MACNC,MAAO,YACPC,gBAAiBC,MAAMC,QAAQC,MAAMzB,OAAOK,OAAOqB,MAAMM,MAAMJ,MAAM,IAAKC,YAC1EzB,YAAaJ,OAAOK,OAAOqB,MAAMM,KACjCf,KAAM,CACJnB,KAAKgC,sBACLhC,KAAKgC,sBACLhC,KAAKgC,sBACLhC,KAAKgC,sBACLhC,KAAKgC,sBACLhC,KAAKgC,sBACLhC,KAAKgC,0BAMXP,MAAMU,QAAQC,SAAS,CACrBC,kBAAmB,SAAUC,EAAeC,GAE1C,IAAIC,EAAMF,EAAcG,MAAMD,IAE9BF,EAAcnB,KAAKE,SAASqB,QAAQ,SAAUC,EAASC,GAErD,KAAuB,EAAnBN,EAAcO,IAAlB,CAIA,IAAIC,EAAOR,EAAcS,eAAeH,GACnCE,EAAKE,QACRF,EAAK3B,KAAKuB,QAAQ,SAAUO,EAASC,GAEnCV,EAAIW,UAAY,UAKhBX,EAAIY,KAAO3B,MAAMC,QAAQ2B,WAHR,GACC,SACC,WAInB,IAAIC,EAAaX,EAAQxB,KAAK+B,GAAOK,WAGrCf,EAAIgB,UAAY,SAChBhB,EAAIiB,aAAe,SAEnB,IACMC,EAAWT,EAAQU,kBACzBnB,EAAIoB,SAASN,EAAYI,EAASG,EAAGH,EAASI,EAAKC,EAFnC,WAU1B,IAAMC,EAASC,EAAE,0BAA0B,GAAGC,WAAW,MAC7C,IAAIzC,MAAMuC,EAAQ,CAC5B1C,KAAM,MACNH,KAAMA,EACNgD,QAAS,CACPC,YAAY,EACZC,OAAQ,CACNC,SAAS,GAEXC,MAAO,CACLD,SAAS,EACTE,KAAM,iEAOZ,IAAMrD,EAAO,CACXC,OAAQ,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACnDC,SAAU,CAAC,CACTC,KAAM,OACNC,MAAO,YACPjB,YAAaJ,OAAOK,OAAOqB,MAAMM,KACjCuC,YAAa,EACbC,MAAM,EACNvD,KAAM,CACJnB,KAAKgC,sBACLhC,KAAKgC,sBACLhC,KAAKgC,sBACLhC,KAAKgC,sBACLhC,KAAKgC,sBACLhC,KAAKgC,sBACLhC,KAAKgC,wBAEN,CACDV,KAAM,MACNC,MAAO,YACPC,gBAAiBtB,OAAOK,OAAOqB,MAAM+C,IACrCxD,KAAM,CACJnB,KAAKgC,sBACLhC,KAAKgC,sBACLhC,KAAKgC,sBACLhC,KAAKgC,sBACLhC,KAAKgC,sBACLhC,KAAKgC,sBACLhC,KAAKgC,uBAEP1B,YAAa,QACbmE,YAAa,GACZ,CACDnD,KAAM,MACNC,MAAO,YACPC,gBAAiBtB,OAAOK,OAAOqB,MAAMC,OACrCV,KAAM,CACJnB,KAAKgC,sBACLhC,KAAKgC,sBACLhC,KAAKgC,sBACLhC,KAAKgC,sBACLhC,KAAKgC,sBACLhC,KAAKgC,sBACLhC,KAAKgC,0BAMLgC,EAASC,EAAE,0BAA0B,GAAGC,WAAW,MAC7C,IAAIzC,MAAMuC,EAAQ,CAC5B1C,KAAM,MACNH,KAAMA,EACNgD,QAAS,CACPC,YAAY,EACZC,OAAQ,CACNC,SAAS,GAEXC,MAAO,CACLD,SAAS,EACTE,KAAM,wBAERI,SAAU,CACRC,KAAM,QACNC,WAAW,4CAOjB,IAEM3D,EAAO,CACX4D,UAAW,CACTC,SAAU,KAEZ3D,SAAU,CAAC,CACTE,MAAO,YACPC,gBAAiBC,MAAMC,QAAQC,MAAMzB,OAAOK,OAAOqB,MAAMC,QAAQC,MAAM,IAAKC,YAC5EzB,YAAaJ,OAAOK,OAAOqB,MAAMC,OACjC4C,YAAa,EACbtD,KAAM,CAAC,CACL0C,EAAG7D,KAAKgC,sBACR8B,EAAG9D,KAAKgC,sBACRiD,EAAGjE,KAAKkE,IAAIlF,KAAKgC,uBAAyB,GACzC,CACD6B,EAAG7D,KAAKgC,sBACR8B,EAAG9D,KAAKgC,sBACRiD,EAAGjE,KAAKkE,IAAIlF,KAAKgC,uBAAyB,GACzC,CACD6B,EAAG7D,KAAKgC,sBACR8B,EAAG9D,KAAKgC,sBACRiD,EAAGjE,KAAKkE,IAAIlF,KAAKgC,uBAAyB,GACzC,CACD6B,EAAG7D,KAAKgC,sBACR8B,EAAG9D,KAAKgC,sBACRiD,EAAGjE,KAAKkE,IAAIlF,KAAKgC,uBAAyB,GACzC,CACD6B,EAAG7D,KAAKgC,sBACR8B,EAAG9D,KAAKgC,sBACRiD,EAAGjE,KAAKkE,IAAIlF,KAAKgC,uBAAyB,GACzC,CACD6B,EAAG7D,KAAKgC,sBACR8B,EAAG9D,KAAKgC,sBACRiD,EAAGjE,KAAKkE,IAAIlF,KAAKgC,uBAAyB,GACzC,CACD6B,EAAG7D,KAAKgC,sBACR8B,EAAG9D,KAAKgC,sBACRiD,EAAGjE,KAAKkE,IAAIlF,KAAKgC,uBAAyB,KAE3C,CACDT,MAAO,YACPC,gBAAiBC,MAAMC,QAAQC,MAAMzB,OAAOK,OAAOqB,MAAMM,MAAMJ,MAAM,IAAKC,YAC1EzB,YAAaJ,OAAOK,OAAOqB,MAAMM,KACjCuC,YAAa,EACbtD,KAAM,CAAC,CACL0C,EAAG7D,KAAKgC,sBACR8B,EAAG9D,KAAKgC,sBACRiD,EAAGjE,KAAKkE,IAAIlF,KAAKgC,uBAAyB,GACzC,CACD6B,EAAG7D,KAAKgC,sBACR8B,EAAG9D,KAAKgC,sBACRiD,EAAGjE,KAAKkE,IAAIlF,KAAKgC,uBAAyB,GACzC,CACD6B,EAAG7D,KAAKgC,sBACR8B,EAAG9D,KAAKgC,sBACRiD,EAAGjE,KAAKkE,IAAIlF,KAAKgC,uBAAyB,GACzC,CACD6B,EAAG7D,KAAKgC,sBACR8B,EAAG9D,KAAKgC,sBACRiD,EAAGjE,KAAKkE,IAAIlF,KAAKgC,uBAAyB,GACzC,CACD6B,EAAG7D,KAAKgC,sBACR8B,EAAG9D,KAAKgC,sBACRiD,EAAGjE,KAAKkE,IAAIlF,KAAKgC,uBAAyB,GACzC,CACD6B,EAAG7D,KAAKgC,sBACR8B,EAAG9D,KAAKgC,sBACRiD,EAAGjE,KAAKkE,IAAIlF,KAAKgC,uBAAyB,GACzC,CACD6B,EAAG7D,KAAKgC,sBACR8B,EAAG9D,KAAKgC,sBACRiD,EAAGjE,KAAKkE,IAAIlF,KAAKgC,uBAAyB,OAM1CgC,EAASC,EAAE,kBAAkB,GAAGC,WAAW,MACrC,IAAIzC,MAAMuC,EAAQ,CAC5B1C,KAAM,SACNH,KAAMA,EACNgD,QAAS,CACPC,YAAY,EACZC,OAAQ,CACNC,SAAS,GAEXC,MAAO,CACLD,SAAS,EACTE,KAAM,gBAERI,SAAU,CACRC,KAAM,qDAOZ,IAAM1D,EAAO,CACXA,KAAM,CACJE,SAAU,CAAC,CACTF,KAAM,CACJnB,KAAKmF,gBACLnF,KAAKmF,gBACLnF,KAAKmF,gBACLnF,KAAKmF,gBACLnF,KAAKmF,iBAEP7E,YAAa,CAACN,KAAKM,YAAaN,KAAKM,YAAaN,KAAKM,YAAaN,KAAKM,YAAaN,KAAKM,aAC3FkB,gBAAiB,CACftB,OAAOkF,UAAUlF,OAAOK,OAAOqB,MAAM+C,IAAK,IAC1CzE,OAAOkF,UAAUlF,OAAOK,OAAOqB,MAAMC,OAAQ,IAC7C3B,OAAOkF,UAAUlF,OAAOK,OAAOqB,MAAMyD,OAAQ,IAC7CnF,OAAOkF,UAAUlF,OAAOK,OAAOqB,MAAMM,KAAM,IAC3ChC,OAAOkF,UAAUlF,OAAOK,OAAOqB,MAAM0D,OAAQ,KAE/C/D,MAAO,eAETH,OAAQ,CACN,MACA,SACA,SACA,QACA,SAGJ+C,QAAS,CACPC,YAAY,EACZC,OAAQ,CACNC,SAAS,GAEXC,MAAO,CACLD,SAAS,EACTE,KAAM,oBAERe,MAAO,CACLC,MAAO,CACLC,aAAa,EACbC,cAAexF,OAAOyF,iBAExBC,SAAS,GAEXb,UAAW,CACTc,eAAe,EACfC,cAAc,KAMd9B,EAASC,EAAE,sBAAsB,GAAGC,WAAW,MACzCzC,MAAMsE,UAAU/B,EAAQ7C,sCAIpC,IAAMA,EAAO,CACXG,KAAM,MACNH,KAAM,CACJE,SAAU,CAAC,CACTF,KAAM,CACJnB,KAAKmF,gBACLnF,KAAKmF,gBACLnF,KAAKmF,gBACLnF,KAAKmF,gBACLnF,KAAKmF,iBAEP7E,YAAa,CAACN,KAAKM,YAAaN,KAAKM,YAAaN,KAAKM,YAAaN,KAAKM,YAAaN,KAAKM,aAC3FkB,gBAAiB,CACftB,OAAOK,OAAOqB,MAAM+C,IACpBzE,OAAOK,OAAOqB,MAAMC,OACpB3B,OAAOK,OAAOqB,MAAMyD,OACpBnF,OAAOK,OAAOqB,MAAMM,KACpBhC,OAAOK,OAAOqB,MAAM0D,QAEtB/D,MAAO,cAETH,OAAQ,CACN,MACA,SACA,SACA,QACA,SAGJ+C,QAAS,CACPC,YAAY,EACZC,OAAQ,CACNC,SAAS,GAEXC,MAAO,CACLD,SAAS,EACTE,KAAM,eAMNR,EAASC,EAAE,eAAe,GAAGC,WAAW,MAClC,IAAIzC,MAAMuC,EAAQ7C,2CAI9B,IAAMA,EAAO,CACXG,KAAM,WACNH,KAAM,CACJE,SAAU,CAAC,CACTF,KAAM,CACJnB,KAAKmF,gBACLnF,KAAKmF,gBACLnF,KAAKmF,gBACLnF,KAAKmF,gBACLnF,KAAKmF,iBAEP7E,YAAa,CAACN,KAAKM,YAAaN,KAAKM,YAAaN,KAAKM,YAAaN,KAAKM,YAAaN,KAAKM,aAC3FkB,gBAAiB,CACftB,OAAOK,OAAOqB,MAAM+C,IACpBzE,OAAOK,OAAOqB,MAAMC,OACpB3B,OAAOK,OAAOqB,MAAMyD,OACpBnF,OAAOK,OAAOqB,MAAMM,KACpBhC,OAAOK,OAAOqB,MAAM0D,QAEtB/D,MAAO,cAETH,OAAQ,CACN,MACA,SACA,SACA,QACA,SAGJ+C,QAAS,CACPC,YAAY,EACZC,OAAQ,CACNC,SAAS,GAEXC,MAAO,CACLD,SAAS,EACTE,KAAM,kBAERO,UAAW,CACTe,cAAc,EACdD,eAAe,KAMf7B,EAASC,EAAE,oBAAoB,GAAGC,WAAW,MACvC,IAAIzC,MAAMuC,EAAQ7C,YASlC8C,EAAE+B,UAAUC,GAAG,aAAc,WAC3B,IAAInG","file":"../../javascript/pages/chartjs-others-demo.min.js","sourcesContent":["// Chartjs Other Demo\n// =============================================================\n\nclass ChartjsOtherDemo {\n\n  constructor () {\n    this.isDarkSkin = Looper.skin === 'dark'\n    this.gray = Looper.getColors('gray')\n    this.borderColor = this.isDarkSkin ? this.gray[200] : Looper.colors.white\n\n    this.init()\n\n  }\n\n  init () {\n    // event handlers\n    this.dataLabellingChart()\n    this.comboBarLineChart()\n    this.bubbleChart()\n    this.polarAreaChart()\n    this.pieChart()\n    this.doughnutChart()\n  }\n\n  randomScalingFactor () {\n    return (Math.random() > 0.5 ? 1.0 : -1.0) * Math.round(Math.random() * 100)\n  }\n\n  randomScaling () {\n    return Math.round(Math.random() * 100)\n  }\n\n  months () {\n    return ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n  }\n\n  dataLabellingChart () {\n    const data = {\n      labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n      datasets: [{\n        type: 'bar',\n        label: 'Dataset 1',\n        backgroundColor: Chart.helpers.color(Looper.colors.brand.purple).alpha(0.2).rgbString(),\n        borderColor: Looper.colors.brand.purple,\n        data: [\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor()\n        ]\n      }, {\n        type: 'line',\n        label: 'Dataset 2',\n        backgroundColor: Chart.helpers.color(Looper.colors.brand.green).alpha(0.2).rgbString(),\n        borderColor: Looper.colors.brand.green,\n        data: [\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor()\n        ]\n      }, {\n        type: 'bar',\n        label: 'Dataset 3',\n        backgroundColor: Chart.helpers.color(Looper.colors.brand.teal).alpha(0.2).rgbString(),\n        borderColor: Looper.colors.brand.teal,\n        data: [\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor()\n        ]\n      }]\n    }\n\n    // Define a plugin to provide data labels\n    Chart.plugins.register({\n      afterDatasetsDraw: function (chartInstance, easing) {\n        // To only draw at the end of animation, check for easing === 1\n        let ctx = chartInstance.chart.ctx\n\n        chartInstance.data.datasets.forEach(function (dataset, i) {\n          // labelling only first chart\n          if (chartInstance.id > 0) {\n            return\n          }\n\n          let meta = chartInstance.getDatasetMeta(i)\n          if (!meta.hidden) {\n            meta.data.forEach(function (element, index) {\n              // Draw the text in black, with the specified font\n              ctx.fillStyle = '#686F76'\n\n              const fontSize = 12\n              const fontStyle = 'normal'\n              const fontFamily = 'inherit'\n              ctx.font = Chart.helpers.fontString(fontSize, fontStyle, fontFamily)\n\n              // Just naively convert to string for now\n              let dataString = dataset.data[index].toString()\n\n              // Make sure alignment settings are correct\n              ctx.textAlign = 'center'\n              ctx.textBaseline = 'middle'\n\n              const padding = 5\n              const position = element.tooltipPosition()\n              ctx.fillText(dataString, position.x, position.y - (fontSize / 2) - padding)\n            })\n          }\n        })\n      }\n    })\n\n    // init chart data labelling\n    const canvas = $('#canvas-data-labelling')[0].getContext('2d')\n    let chart = new Chart(canvas, {\n      type: 'bar',\n      data: data,\n      options: {\n        responsive: true,\n        legend: {\n          display: false\n        },\n        title: {\n          display: true,\n          text: 'Data Labelling'\n        },\n      }\n    })\n  }\n\n  comboBarLineChart () {\n    const data = {\n      labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n      datasets: [{\n        type: 'line',\n        label: 'Dataset 1',\n        borderColor: Looper.colors.brand.teal,\n        borderWidth: 2,\n        fill: false,\n        data: [\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor()\n        ]\n      }, {\n        type: 'bar',\n        label: 'Dataset 2',\n        backgroundColor: Looper.colors.brand.red,\n        data: [\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor()\n        ],\n        borderColor: 'white',\n        borderWidth: 2\n      }, {\n        type: 'bar',\n        label: 'Dataset 3',\n        backgroundColor: Looper.colors.brand.purple,\n        data: [\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor()\n        ]\n      }]\n    }\n\n    // init chart combo bar line\n    const canvas = $('#canvas-combo-bar-line')[0].getContext('2d')\n    let chart = new Chart(canvas, {\n      type: 'bar',\n      data: data,\n      options: {\n        responsive: true,\n        legend: {\n          display: false\n        },\n        title: {\n          display: true,\n          text: 'Combo Bar Line Chart'\n        },\n        tooltips: {\n          mode: 'index',\n          intersect: true\n        }\n      }\n    })\n  }\n\n  bubbleChart () {\n    const DEFAULT_DATASET_SIZE = 7\n    const addedCount = 2\n    const data = {\n      animation: {\n        duration: 10000\n      },\n      datasets: [{\n        label: 'Dataset 1',\n        backgroundColor: Chart.helpers.color(Looper.colors.brand.purple).alpha(0.5).rgbString(),\n        borderColor: Looper.colors.brand.purple,\n        borderWidth: 1,\n        data: [{\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n          r: Math.abs(this.randomScalingFactor()) / 5,\n        }, {\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n          r: Math.abs(this.randomScalingFactor()) / 5,\n        }, {\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n          r: Math.abs(this.randomScalingFactor()) / 5,\n        }, {\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n          r: Math.abs(this.randomScalingFactor()) / 5,\n        }, {\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n          r: Math.abs(this.randomScalingFactor()) / 5,\n        }, {\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n          r: Math.abs(this.randomScalingFactor()) / 5,\n        }, {\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n          r: Math.abs(this.randomScalingFactor()) / 5,\n        }]\n      }, {\n        label: 'Dataset 2',\n        backgroundColor: Chart.helpers.color(Looper.colors.brand.teal).alpha(0.5).rgbString(),\n        borderColor: Looper.colors.brand.teal,\n        borderWidth: 1,\n        data: [{\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n          r: Math.abs(this.randomScalingFactor()) / 5,\n        }, {\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n          r: Math.abs(this.randomScalingFactor()) / 5,\n        }, {\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n          r: Math.abs(this.randomScalingFactor()) / 5,\n        }, {\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n          r: Math.abs(this.randomScalingFactor()) / 5,\n        }, {\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n          r: Math.abs(this.randomScalingFactor()) / 5,\n        }, {\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n          r: Math.abs(this.randomScalingFactor()) / 5,\n        }, {\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n          r: Math.abs(this.randomScalingFactor()) / 5,\n        }]\n      }]\n    }\n\n    // init chart bubble\n    const canvas = $('#canvas-bubble')[0].getContext('2d')\n    let chart = new Chart(canvas, {\n      type: 'bubble',\n      data: data,\n      options: {\n        responsive: true,\n        legend: {\n          display: false\n        },\n        title: {\n          display: true,\n          text: 'Bubble Chart'\n        },\n        tooltips: {\n          mode: 'point'\n        }\n      }\n    })\n  }\n\n  polarAreaChart () {\n    const data = {\n      data: {\n        datasets: [{\n          data: [\n            this.randomScaling(),\n            this.randomScaling(),\n            this.randomScaling(),\n            this.randomScaling(),\n            this.randomScaling(),\n          ],\n          borderColor: [this.borderColor, this.borderColor, this.borderColor, this.borderColor, this.borderColor],\n          backgroundColor: [\n            Looper.hexToRgba(Looper.colors.brand.red, .5),\n            Looper.hexToRgba(Looper.colors.brand.purple, .5),\n            Looper.hexToRgba(Looper.colors.brand.yellow, .5),\n            Looper.hexToRgba(Looper.colors.brand.teal, .5),\n            Looper.hexToRgba(Looper.colors.brand.indigo, .5),\n          ],\n          label: 'My dataset' // for legend\n        }],\n        labels: [\n          'Red',\n          'Purple',\n          'Yellow',\n          'Green',\n          'Blue'\n        ]\n      },\n      options: {\n        responsive: true,\n        legend: {\n          display: false\n        },\n        title: {\n          display: true,\n          text: 'Polar Area Chart'\n        },\n        scale: {\n          ticks: {\n            beginAtZero: true,\n            backdropColor: Looper.getLightColor()\n          },\n          reverse: false\n        },\n        animation: {\n          animateRotate: false,\n          animateScale: true\n        }\n      }\n    }\n\n    // init chart polar area\n    const canvas = $('#canvas-polar-area')[0].getContext('2d')\n    let chart = Chart.PolarArea(canvas, data)\n  }\n\n  pieChart () {\n    const data = {\n      type: 'pie',\n      data: {\n        datasets: [{\n          data: [\n            this.randomScaling(),\n            this.randomScaling(),\n            this.randomScaling(),\n            this.randomScaling(),\n            this.randomScaling(),\n          ],\n          borderColor: [this.borderColor, this.borderColor, this.borderColor, this.borderColor, this.borderColor],\n          backgroundColor: [\n            Looper.colors.brand.red,\n            Looper.colors.brand.purple,\n            Looper.colors.brand.yellow,\n            Looper.colors.brand.teal,\n            Looper.colors.brand.indigo,\n          ],\n          label: 'Dataset 1'\n        }],\n        labels: [\n          'Red',\n          'Purple',\n          'Yellow',\n          'Green',\n          'Blue'\n        ]\n      },\n      options: {\n        responsive: true,\n        legend: {\n          display: false\n        },\n        title: {\n          display: true,\n          text: 'Pie Chart'\n        }\n      }\n    }\n\n    // init chart pie\n    const canvas = $('#canvas-pie')[0].getContext('2d')\n    let chart = new Chart(canvas, data)\n  }\n\n  doughnutChart () {\n    const data = {\n      type: 'doughnut',\n      data: {\n        datasets: [{\n          data: [\n            this.randomScaling(),\n            this.randomScaling(),\n            this.randomScaling(),\n            this.randomScaling(),\n            this.randomScaling(),\n          ],\n          borderColor: [this.borderColor, this.borderColor, this.borderColor, this.borderColor, this.borderColor],\n          backgroundColor: [\n            Looper.colors.brand.red,\n            Looper.colors.brand.purple,\n            Looper.colors.brand.yellow,\n            Looper.colors.brand.teal,\n            Looper.colors.brand.indigo,\n          ],\n          label: 'Dataset 1'\n        }],\n        labels: [\n          'Red',\n          'Purple',\n          'Yellow',\n          'Green',\n          'Blue'\n        ]\n      },\n      options: {\n        responsive: true,\n        legend: {\n          display: false\n        },\n        title: {\n          display: true,\n          text: 'Doughnut Chart'\n        },\n        animation: {\n          animateScale: true,\n          animateRotate: true\n        }\n      }\n    }\n\n    // init chart doughnut\n    const canvas = $('#canvas-doughnut')[0].getContext('2d')\n    let chart = new Chart(canvas, data)\n  }\n}\n\n\n/**\n * Keep in mind that your scripts may not always be executed after the theme is completely ready,\n * you might need to observe the `theme:load` event to make sure your scripts are executed after the theme is ready.\n */\n$(document).on('theme:init', () => {\n  new ChartjsOtherDemo()\n})\n"]}