{"version":3,"sources":["pages/chartjs-bar-demo.js"],"names":["ChartjsBarDemo","_classCallCheck","this","init","barChart","barHorizontal","barStacked","barStackedGroup","barMultiAxis","red","orange","yellow","green","teal","blue","purple","gray","Object","keys","Looper","getColors","Math","random","round","self","data","labels","datasets","label","backgroundColor","colors","brand","borderColor","borderWidth","randomScalingFactor","canvas","$","getContext","chart","Chart","type","options","title","display","text","scales","xAxes","ticks","maxRotation","maxTicksLimit","on","e","preventDefault","zero","forEach","dataset","map","update","length","month","months","push","index","splice","datasetIndex","pop","elements","rectangle","brandNames","colorBrandNames","colorName","newColor","newDataset","tooltips","mode","intersect","stacked","yAxes","stack","pink","yAxisID","position","id","gridLines","drawOnChartArea","document"],"mappings":"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","file":"../../javascript/pages/chartjs-bar-demo.min.js","sourcesContent":["// Chartjs Bar Demo\n// =============================================================\n\nclass ChartjsBarDemo {\n\n  constructor () {\n\n    this.init()\n\n  }\n\n  init () {\n    // event handlers\n    this.barChart()\n    this.barHorizontal()\n    this.barStacked()\n    this.barStackedGroup()\n    this.barMultiAxis()\n  }\n\n  colors () {\n    return {\n      red: '#B76BA3',\n      orange: '#EC935E',\n      yellow: '#F7C46C',\n      green: '#A7C796',\n      teal: '#00A28A',\n      blue: '#346CB0',\n      purple: '#5F4B8B',\n      gray: '#BEC1C4'\n    }\n  }\n\n  colorBrandNames () {\n    return Object.keys(Looper.getColors('brand'))\n  }\n\n  randomScalingFactor () {\n    return (Math.random() > 0.5 ? 1.0 : -1.0) * Math.round(Math.random() * 100)\n  }\n\n  months () {\n    return ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n  }\n\n  barChart () {\n    const self = this\n    const data = {\n      labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n      datasets: [{\n        label: 'Dataset 1',\n        backgroundColor: Looper.colors.brand.purple,\n        borderColor: Looper.colors.brand.purple,\n        borderWidth: 1,\n        data: [\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor()\n        ]\n      }, {\n        label: 'Dataset 2',\n        backgroundColor: Looper.colors.brand.teal,\n        borderColor: Looper.colors.brand.teal,\n        borderWidth: 1,\n        data: [\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor()\n        ]\n      }]\n    }\n    // init chart bar\n    const canvas = $('#canvas-bar')[0].getContext('2d')\n    let chart = new Chart(canvas, {\n      type: 'bar',\n      data: data,\n      options: {\n        title: {\n          display: true,\n          text: 'Bar Chart'\n        },\n        scales: {\n          xAxes: [{\n            ticks: {\n              maxRotation: 0,\n              maxTicksLimit: 5\n            }\n          }]\n        }\n      }\n    })\n\n    // randomize data\n    $('#randomizeData').on('click', function (e) {\n      e.preventDefault()\n      const zero = Math.random() < 0.2 ? true : false\n      data.datasets.forEach(function (dataset) {\n        dataset.data = dataset.data.map(function () {\n          return zero ? 0.0 : self.randomScalingFactor()\n        })\n      })\n      chart.update()\n    })\n\n    // add data\n    $('#addData').on('click', function (e) {\n      e.preventDefault()\n      if (data.datasets.length > 0) {\n        const month = self.months()[data.labels.length % self.months().length]\n        data.labels.push(month)\n        for (let index = 0; index < data.datasets.length; ++index) {\n          //chart.addData(this.randomScalingFactor(), index)\n          data.datasets[index].data.push(self.randomScalingFactor())\n        }\n        chart.update()\n      }\n    })\n\n    // remove data\n    $('#removeData').on('click', function (e) {\n      e.preventDefault()\n      data.labels.splice(-1, 1) // remove the label first\n      data.datasets.forEach(function (dataset, datasetIndex) {\n        dataset.data.pop()\n      })\n      chart.update()\n    })\n  }\n\n  barHorizontal () {\n    const self = this\n    const data = {\n      labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n      datasets: [{\n        label: 'Dataset 1',\n        backgroundColor: Looper.colors.brand.purple,\n        borderColor: Looper.colors.brand.purple,\n        borderWidth: 1,\n        data: [\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor()\n        ]\n      }, {\n        label: 'Dataset 2',\n        backgroundColor: Looper.colors.brand.teal,\n        borderColor: Looper.colors.brand.teal,\n        data: [\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor()\n        ]\n      }]\n    }\n    // init chart horizontal bar\n    const canvas = $('#canvas-horizontal-bar')[0].getContext('2d')\n    let chart = new Chart(canvas, {\n      type: 'horizontalBar',\n      data: data,\n      options: {\n        // Elements options apply to all of the options unless overridden in a dataset\n        // In this case, we are setting the border of each horizontal bar to be 2px wide\n        elements: {\n          rectangle: {\n            borderWidth: 2,\n          }\n        },\n        title: {\n          display: true,\n          text: 'Horizontal Bar Chart'\n        }\n      }\n    })\n\n    // randomize data\n    $('#randomizeDataHorizontalBar').on('click', function (e) {\n      e.preventDefault()\n      const zero = Math.random() < 0.2 ? true : false\n      data.datasets.forEach(function (dataset) {\n        dataset.data = dataset.data.map(function () {\n          return zero ? 0.0 : self.randomScalingFactor()\n        })\n      })\n      chart.update()\n    })\n\n    // add dataset\n    $('#addDatasetHorizontalBar').on('click', function (e) {\n      e.preventDefault()\n      if (data.datasets.length <= 6) {\n        const brandNames = self.colorBrandNames()\n        const colorName = brandNames[data.datasets.length % brandNames.length]\n        const newColor = Looper.getColors('brand')[colorName]\n        const newDataset = {\n          label: 'Dataset ' + data.datasets.length,\n          backgroundColor: newColor,\n          borderColor: newColor,\n          data: []\n        }\n        for (let index = 0; index < data.labels.length; ++index) {\n          newDataset.data.push(self.randomScalingFactor())\n        }\n        data.datasets.push(newDataset)\n        chart.update()\n      }\n    })\n\n    // remove dataset\n    $('#removeDatasetHorizontalBar').on('click', function () {\n      data.datasets.splice(0, 1)\n      chart.update()\n    })\n  }\n\n  barStacked () {\n    const data = {\n      labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n      datasets: [{\n        label: 'Dataset 1',\n        backgroundColor: Looper.colors.brand.blue,\n        data: [\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor()\n        ]\n      }, {\n        label: 'Dataset 2',\n        backgroundColor: Looper.colors.brand.teal,\n        data: [\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor()\n        ]\n      }, {\n        label: 'Dataset 3',\n        backgroundColor: Looper.colors.brand.purple,\n        data: [\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor()\n        ]\n      }]\n    }\n\n    // init Chart Stacked Bar\n    const canvas = $('#canvas-stacked')[0].getContext('2d')\n    let chart = new Chart(canvas, {\n      type: 'bar',\n      data: data,\n      options: {\n        title: {\n          display: true,\n          text: 'Stacked'\n        },\n        tooltips: {\n          mode: 'index',\n          intersect: false\n        },\n        scales: {\n          xAxes: [{\n            stacked: true,\n          }],\n          yAxes: [{\n            stacked: true\n          }]\n        }\n      }\n    })\n  }\n\n  barStackedGroup () {\n    const data = {\n      labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n      datasets: [{\n        label: 'Dataset 1',\n        backgroundColor: Looper.colors.brand.purple,\n        stack: 'Stack 0',\n        data: [\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor()\n        ]\n      }, {\n        label: 'Dataset 2',\n        backgroundColor: Looper.colors.brand.teal,\n        stack: 'Stack 0',\n        data: [\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor()\n        ]\n      }, {\n        label: 'Dataset 3',\n        backgroundColor: Looper.colors.brand.teal,\n        stack: 'Stack 1',\n        data: [\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor()\n        ]\n      }]\n    }\n    // init chart stacked group bar\n    const canvas = $('#canvas-stacked-group')[0].getContext('2d')\n    let chart = new Chart(canvas, {\n      type: 'bar',\n      data: data,\n      options: {\n        title: {\n          display: true,\n          text: 'Stacked Group'\n        },\n        tooltips: {\n          mode: 'index',\n          intersect: false\n        },\n        scales: {\n          xAxes: [{\n            stacked: true,\n          }],\n          yAxes: [{\n            stacked: true\n          }]\n        }\n      }\n    })\n  }\n\n  barMultiAxis () {\n    const data = {\n      labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n      datasets: [{\n        label: 'Dataset 1',\n        backgroundColor: [\n          Looper.colors.brand.purple,\n          Looper.colors.brand.orange,\n          Looper.colors.brand.green,\n          Looper.colors.brand.teal,\n          Looper.colors.brand.blue,\n          Looper.colors.brand.pink,\n          Looper.colors.brand.red\n        ],\n        yAxisID: 'y-axis-1',\n        data: [\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor()\n        ]\n      }, {\n        label: 'Dataset 2',\n        backgroundColor: Looper.colors.gray[400],\n        yAxisID: 'y-axis-2',\n        data: [\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor()\n        ]\n      }]\n    }\n    const canvas = $('#canvas-multi-axis')[0].getContext('2d')\n    let chart = new Chart(canvas, {\n      type: 'bar',\n      data: data,\n      options: {\n        title: {\n          display: true,\n          text: 'Multi Axis'\n        },\n        tooltips: {\n          mode: 'index',\n          intersect: true\n        },\n        scales: {\n          yAxes: [{\n            type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\n            display: true,\n            position: 'left',\n            id: 'y-axis-1',\n          }, {\n            type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\n            display: true,\n            position: 'right',\n            id: 'y-axis-2',\n            gridLines: {\n              drawOnChartArea: false\n            }\n          }],\n        }\n      }\n    })\n  }\n}\n\n\n/**\n * Keep in mind that your scripts may not always be executed after the theme is completely ready,\n * you might need to observe the `theme:load` event to make sure your scripts are executed after the theme is ready.\n */\n$(document).on('theme:init', () => {\n  new ChartjsBarDemo()\n})\n"]}