{"version":3,"sources":["pages/board-demo.js"],"names":["BoardDemo","_classCallCheck","this","ntTodos","id","desc","checked","init","handleModalLayerContent","handleDntAssignees","handleDntLabels","handleNtTodos","handleNewTaskForm","$","on","e","button","relatedTarget","title","text","recipient","data","modal","find","html","concat","self","document","hasClass","is","prop","assignees","btnText","values","each","push","valuesLength","length","sort","removeClass","addClass","listAssignees","get","listAssigneesSorted","sortingElems","i","elem","before","append","labels","clearTodoInp","keepFocus","arguments","undefined","val","focus","blur","parents","keyCode","preventDefault","todo","addNtTodo","ntMarkdown","SimpleMDE","element","querySelector","spellChecker","status","toolbar","form","serializeArray","files","taskAttachment","trigger","value","resetNtTodos","JSON","stringify","getNtTodosMeter","tmpl","filter","remove","empty","elems","a","b","toUpperCase","localeCompare","window","boardDemo"],"mappings":"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","file":"../../javascript/pages/board-demo.min.js","sourcesContent":["// Kanban Board Demo\n// =============================================================\n\nclass BoardDemo {\n\n  constructor () {\n    this.ntTodos = [\n      {\n        id: 0,\n        desc: 'Eat corn on the cob',\n        checked: false\n      }\n    ]\n\n    this.init()\n  }\n\n  init () {\n\n    // event handlers\n    this.handleModalLayerContent()\n    /**\n     * handle new task form components\n     * nt => new task\n     * dnt => dropdown new task\n     */\n    this.handleDntAssignees()\n    this.handleDntLabels()\n    this.handleNtTodos()\n    this.handleNewTaskForm()\n  }\n\n  handleModalLayerContent () {\n    $('#modalLayer2').on('show.bs.modal', function (e) {\n      const button = $(e.relatedTarget) // Button that triggered the modal\n      const title = button.text() // Get button text to display as modal title\n      const recipient = button.data('content-layer') // Extract info from data-* attributes\n      // If necessary, you could initiate an AJAX request here (and then do the updating in a callback).\n      // Update the modal's content. We'll use jQuery here, but you could use a data binding library or other methods instead.\n      const modal = $(this)\n      modal.find('#layer-title').text(title)\n      modal.find('.modal-body').html(`\n        <p>If necessary, you could initiate an AJAX request here (and then do the updating in a callback).</p>\n        <p>e.g. load <strong>${recipient}</strong> file then update the modal's content. We'll use jQuery here, but you could use a data binding library or other methods instead.</p>`)\n    })\n  }\n\n  handleDntAssignees () {\n    const self = this\n\n    $(document).on('change', '[name=\"taskAssignees[]\"]', function () {\n      // uncheck all if unassigned is checked\n      if ($(this).hasClass('task-unassignees') && $('#dntmAssignees .task-unassignees').is(':checked')) {\n        $('#dntmAssignees .task-assignees:checked').prop('checked', false)\n      } else {\n        $('#dntmAssignees .task-unassignees').prop('checked', false)\n      }\n\n      // get the assignees:checked then save to array\n      const assignees = $('#dntmAssignees .task-assignees:checked')\n      const button = $('#dntAssignees > span:first-child')\n      let btnText = 'Unassigned'\n      let values = []\n\n      assignees.each(function () {\n        // push to values\n        values.push($(this).data('label'))\n      })\n\n      let valuesLength = values.length\n\n      if (valuesLength) {\n        values.sort()\n        btnText = valuesLength === 1 ? values[0] : `${values[0]} + ${valuesLength - 1} more`\n        button.text(btnText)\n        // show divider\n        $('#dntDivider').removeClass('d-none')\n      } else {\n        button.text(btnText)\n        $('#dntmAssignees .task-unassignees').prop('checked', true)\n        // hide divider\n        $('#dntDivider').addClass('d-none')\n      }\n\n      // sort by data-sort\n      let listAssignees = $('#dntmAssignees > [data-sort]').get()\n      let listAssigneesSorted = self.sortingElems(listAssignees)\n      // group by :checked selector\n      $.each(listAssigneesSorted, function (i, elem) {\n        const $checkbox = $(elem).find('[name=\"taskAssignees[]\"]')\n        if ($checkbox.is(':checked')) {\n          $('#dntDivider').before(elem)\n        } else {\n          $('#dntmAssignees').append(elem)\n        }\n      })\n    })\n  }\n\n  handleDntLabels () {\n    $(document).on('change', '[name=\"taskLabels[]\"]', function () {\n      // uncheck all if unassigned is checked\n      if ($(this).hasClass('task-nolabel') && $('#dntLabels .task-nolabel').is(':checked')) {\n        $('#dntLabels .task-label:checked').prop('checked', false)\n      } else {\n        $('#dntLabels .task-nolabel').prop('checked', false)\n      }\n\n      // get the label:checked then save to array\n      const labels = $('#dntLabels .task-label:checked')\n      const button = $('#bntLabels > span:first-child')\n      let btnText = 'No Label'\n      let values = []\n\n      labels.each(function () {\n        // push to values\n        values.push($(this).data('label'))\n      })\n\n      let valuesLength = values.length\n\n      if (valuesLength) {\n        values.sort()\n        btnText = valuesLength === 1 ? values[0] : `${values[0]} + ${valuesLength - 1} more`\n        button.text(btnText)\n      } else {\n        button.text(btnText)\n        $('#dntLabels .task-nolabel').prop('checked', true)\n      }\n    })\n  }\n\n  handleNtTodos () {\n    const self = this\n    const clearTodoInp = (keepFocus = true) => {\n      $('#ntTodosInpt')\n        .val('')\n        .focus()\n      // stay focus on input field\n      if (!keepFocus) {\n        $('#ntTodosInpt')\n          .blur()\n          .parents('.publisher')\n          .removeClass('focus')\n      }\n    }\n\n    $(document).on('keydown', '#ntTodosInpt', function (e) {\n      // prevent submit on enter before keyboard release\n      if(e.keyCode === 13) {\n        e.preventDefault()\n        return false\n      }\n    })\n    .on('keyup', '#ntTodosInpt', function (e) {\n      const todo = {\n        id: self.ntTodos.length,\n        desc: $(this).val(),\n        checked: false\n      }\n      // on enter\n      if(e.keyCode === 13) {\n        self.addNtTodo(todo)\n        clearTodoInp()\n      }\n    })\n    .on('click', '#ntTodosAdd', function () {\n      self.addNtTodo({\n        id: self.ntTodos.length,\n        desc: $('#ntTodosInpt').val(),\n        checked: false\n      })\n\n      clearTodoInp()\n    })\n    .on('click', '#ntTodosClear', function () {\n      clearTodoInp(false)\n    })\n  }\n\n  handleNewTaskForm () {\n    const self = this\n\n    // init markdown editor\n    this.ntMarkdown = new SimpleMDE({\n      element: document.querySelector('#taskDescription'),\n      spellChecker: false,\n      status: false,\n      toolbar: false\n    })\n\n    $('#addNewTask').on('submit', function () {\n      const form = $(this)\n      let data = form.serializeArray()\n\n      // Get the file input and push to data\n      // I don't want to get deep in this case\n      // there is many way to handle file input, like:\n      //   - http://bit.ly/2PyqlUc\n      //   - http://bit.ly/2NKCAwj\n      // or something else. Feel free to do it in your way.\n      let files = document.querySelector('[name=\"taskAttachment\"]').files\n      data.push({taskAttachment: files})\n\n      // clear form\n      form.trigger('reset')\n      self.ntMarkdown.value('')\n      self.resetNtTodos()\n\n      // close modal\n      $('#modalNewTask').modal('hide')\n\n      // please see form data in your console\n      console.log(data)\n      return false\n    })\n  }\n\n  getNtTodosMeter () {\n    $('#ntTodosMeter').text(`0/${this.ntTodos.length}`)\n  }\n\n  addNtTodo (todo) {\n    // reuired a description\n    if (todo.desc === '') {\n      return\n    }\n    // add todo to todos\n    this.ntTodos.push(todo)\n    // save todos to todos input\n    $('[name=\"ntTodos\"]').val(JSON.stringify(this.ntTodos))\n    // update todos meter\n    this.getNtTodosMeter()\n\n    const tmpl = `<div class=\"todo\">\n      <div class=\"custom-control custom-checkbox\">\n        <input type=\"checkbox\" class=\"custom-control-input\" id=\"todo${todo.id}\" value=\"${todo.id}\">\n        <label class=\"custom-control-label\" for=\"todo${todo.id}\">${todo.desc}</label>\n      </div>\n      <div class=\"todo-actions pr-1\">\n        <button type=\"button\" class=\"btn btn-sm btn-light\" onclick=\"boardDemo.removeNtTodo(${todo.id})\">Delete</button>\n      </div>\n    </div>`\n\n    $('#ntTodos').append(tmpl)\n  }\n\n  removeNtTodo (id) {\n    // remove todo from todos\n    this.ntTodos = this.ntTodos.filter(function (todo) {\n      return todo.id !== id\n    })\n    // save todos to todos input\n    $('[name=\"ntTodos\"]').val(JSON.stringify(this.ntTodos))\n    // update todos meter\n    this.getNtTodosMeter()\n\n    $(`#todo${id}`)\n      .parents('.todo')\n      .remove()\n  }\n\n  resetNtTodos () {\n    // reset todos\n    this.ntTodos = []\n    // save todos\n    $('[name=\"ntTodos\"]').val(JSON.stringify(this.ntTodos))\n    // update todos meter\n    this.getNtTodosMeter()\n\n    $('#ntTodos').empty()\n  }\n\n  sortingElems (elems) {\n    return elems.sort((a, b) => {\n      return $(a)\n        .data('sort')\n        .toUpperCase()\n        .localeCompare($(b).data('sort').toUpperCase())\n    })\n  }\n}\n\n\n/**\n * Keep in mind that your scripts may not always be executed after the theme is completely ready,\n * you might need to observe the `theme:load` event to make sure your scripts are executed after the theme is ready.\n */\n$(document).on('theme:init', () => {\n  window.boardDemo = new BoardDemo()\n})\n"]}