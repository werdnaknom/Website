{"version":3,"sources":["pages/chartjs-scatter-demo.js"],"names":["ChartjsScatterDemo","_classCallCheck","this","init","scatterChart","scatterMultiAxisChart","Math","random","round","data","datasets","label","borderColor","Looper","colors","brand","purple","backgroundColor","x","randomScalingFactor","y","teal","canvas","$","getContext","Chart","Scatter","options","title","display","text","xAxisID","yAxisID","hoverMode","intersect","scales","xAxes","position","gridLines","zeroLineColor","yAxes","type","id","reverse","drawOnChartArea","document","on"],"mappings":"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","file":"../../javascript/pages/chartjs-scatter-demo.min.js","sourcesContent":["// Chartjs Scatter Demo\n// =============================================================\n\nclass ChartjsScatterDemo {\n\n  constructor () {\n\n    this.init()\n\n  }\n\n  init () {\n    // event handlers\n    this.scatterChart()\n    this.scatterMultiAxisChart()\n  }\n\n  randomScalingFactor () {\n    return (Math.random() > 0.5 ? 1.0 : -1.0) * Math.round(Math.random() * 100)\n  }\n\n  months () {\n    return ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n  }\n\n  scatterChart () {\n    const data = {\n      datasets: [{\n        label: 'My First dataset',\n        borderColor: Looper.colors.brand.purple,\n        backgroundColor: Looper.colors.brand.purple,\n        data: [{\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n        }, {\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n        }, {\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n        }, {\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n        }, {\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n        }, {\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n        }, {\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n        }]\n      }, {\n        label: 'My Second dataset',\n        borderColor: Looper.colors.brand.teal,\n        backgroundColor: Looper.colors.brand.teal,\n        data: [{\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n        }, {\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n        }, {\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n        }, {\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n        }, {\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n        }, {\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n        }, {\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n        }]\n      }]\n    }\n\n    // init chart scatter\n    const canvas = $('#canvas-scatter')[0].getContext('2d')\n    let chart = Chart.Scatter(canvas, {\n      data: data,\n      options: {\n        title: {\n          display: true,\n          text: 'Scatter Chart'\n        }\n      }\n    })\n  }\n\n  scatterMultiAxisChart () {\n    const data = {\n      datasets: [{\n        label: 'My First dataset',\n        xAxisID: 'x-axis-1',\n        yAxisID: 'y-axis-1',\n        borderColor: Looper.colors.brand.purple,\n        backgroundColor: Looper.colors.brand.purple,\n        data: [{\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n        }, {\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n        }, {\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n        }, {\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n        }, {\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n        }, {\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n        }, {\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n        }]\n      }, {\n        label: 'My Second dataset',\n        xAxisID: 'x-axis-1',\n        yAxisID: 'y-axis-2',\n        borderColor: Looper.colors.brand.teal,\n        backgroundColor: Looper.colors.brand.teal,\n        data: [{\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n        }, {\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n        }, {\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n        }, {\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n        }, {\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n        }, {\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n        }, {\n          x: this.randomScalingFactor(),\n          y: this.randomScalingFactor(),\n        }]\n      }]\n    }\n\n    // init chart scatter multi axis\n    const canvas = $('#canvas-scatter-multi-axis')[0].getContext('2d')\n    let chart = Chart.Scatter(canvas, {\n      data: data,\n      options: {\n        hoverMode: 'nearest',\n        intersect: true,\n        title: {\n          display: true,\n          text: 'Scatter Chart - Multi Axis'\n        },\n        scales: {\n          xAxes: [{\n            position: 'bottom',\n            gridLines: {\n              zeroLineColor: 'rgba(0,0,0,1)'\n            }\n          }],\n          yAxes: [{\n            type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\n            display: true,\n            position: 'left',\n            id: 'y-axis-1',\n          }, {\n            type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\n            display: true,\n            position: 'right',\n            reverse: true,\n            id: 'y-axis-2',\n            // grid line settings\n            gridLines: {\n              drawOnChartArea: false, // only want the grid lines for one axis to show up\n            },\n          }],\n        }\n      }\n    })\n  }\n}\n\n\n/**\n * Keep in mind that your scripts may not always be executed after the theme is completely ready,\n * you might need to observe the `theme:load` event to make sure your scripts are executed after the theme is ready.\n */\n$(document).on('theme:init', () => {\n  new ChartjsScatterDemo()\n})\n"]}