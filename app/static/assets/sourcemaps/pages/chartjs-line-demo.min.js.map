{"version":3,"sources":["pages/chartjs-line-demo.js"],"names":["ChartjsLineDemo","_classCallCheck","this","init","lineChart","stackedArea","lineStyles","lineStepped","lineSkipPoint","lineDifferentPointSizes","lineMultiAxis","lineInterpolation","Object","keys","Looper","getColors","Math","random","round","self","data","type","labels","datasets","label","backgroundColor","colors","brand","purple","borderColor","randomScalingFactor","fill","teal","options","title","display","text","tooltips","mode","intersect","hover","scales","xAxes","ticks","maxRotation","maxTicksLimit","canvas","$","getContext","chart","Chart","on","e","preventDefault","forEach","dataset","map","update","length","month","months","push","splice","datasetIndex","pop","position","yAxes","stacked","brandNames","colorBrandNames","colorName","newColor","newDataset","index","blue","borderDash","steppedLine","NaN","pointRadius","pointHoverRadius","yAxisID","Line","hoverMode","id","gridLines","drawOnChartArea","datapoints","cubicInterpolationMode","lineTension","legend","suggestedMin","suggestedMax","document"],"mappings":"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","file":"../../javascript/pages/chartjs-line-demo.min.js","sourcesContent":["// Chartjs Line Demo\n// =============================================================\n\nclass ChartjsLineDemo {\n\n  constructor () {\n\n    this.init()\n\n  }\n\n  init () {\n\n    // event handlers\n    this.lineChart()\n    this.stackedArea()\n    this.lineStyles()\n    this.lineStepped()\n    this.lineSkipPoint()\n    this.lineDifferentPointSizes()\n    this.lineMultiAxis()\n    this.lineInterpolation()\n  }\n\n  colorBrandNames () {\n    return Object.keys(Looper.getColors('brand'))\n  }\n\n  randomScalingFactor () {\n    return (Math.random() > 0.5 ? 1.0 : -1.0) * Math.round(Math.random() * 100)\n  }\n\n  months () {\n    return ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n  }\n\n  lineChart () {\n    const self = this\n    const data = {\n      type: 'line',\n      data: {\n        labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        datasets: [{\n          label: 'Data 1',\n          backgroundColor: Looper.colors.brand.purple,\n          borderColor: Looper.colors.brand.purple,\n          data: [\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor()\n          ],\n          fill: false,\n        }, {\n          label: 'Data 2',\n          fill: false,\n          backgroundColor: Looper.colors.brand.teal,\n          borderColor: Looper.colors.brand.teal,\n          data: [\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor()\n          ],\n        }]\n      },\n      options: {\n        title: {\n          display: true,\n          text: 'Line Chart'\n        },\n        tooltips: {\n          mode: 'index',\n          intersect: false,\n        },\n        hover: {\n          mode: 'nearest',\n          intersect: true\n        },\n        scales: {\n          xAxes: [{\n            ticks: {\n              maxRotation: 0,\n              maxTicksLimit: 5\n            }\n          }]\n        }\n      }\n    }\n\n    // init chart line\n    const canvas = $('#canvas-line')[0].getContext('2d')\n    let chart = new Chart(canvas, data)\n\n    // randomize data\n    $('#randomizeData').on('click', function (e) {\n      e.preventDefault()\n      data.data.datasets.forEach(function (dataset) {\n        dataset.data = dataset.data.map(function () {\n          return self.randomScalingFactor()\n        })\n      })\n      chart.update()\n    })\n\n    // add data\n    $('#addData').on('click', function (e) {\n      e.preventDefault()\n      if (data.data.datasets.length > 0) {\n        const month = self.months()[data.data.labels.length % self.months().length]\n        data.data.labels.push(month)\n        data.data.datasets.forEach(function (dataset) {\n          dataset.data.push(self.randomScalingFactor())\n        })\n        chart.update()\n      }\n    })\n\n    // remove data\n    $('#removeData').on('click', function (e) {\n      e.preventDefault()\n      data.data.labels.splice(-1, 1) // remove the label first\n      data.data.datasets.forEach(function (dataset, datasetIndex) {\n        dataset.data.pop()\n      })\n      chart.update()\n    })\n  }\n\n  stackedArea () {\n    const self = this\n    const data = {\n      type: 'line',\n      data: {\n        labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        datasets: [{\n          label: 'Data 1',\n          borderColor: Looper.colors.brand.purple,\n          backgroundColor: Looper.colors.brand.purple,\n          data: [\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor()\n          ],\n        }, {\n          label: 'Data 2',\n          borderColor: Looper.colors.brand.teal,\n          backgroundColor: Looper.colors.brand.teal,\n          data: [\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor()\n          ],\n        }]\n      },\n      options: {\n        title: {\n          display: true,\n          text: 'Stacked Area'\n        },\n        tooltips: {\n          mode: 'index',\n          position: 'nearest'\n        },\n        hover: {\n          mode: 'index'\n        },\n        scales: {\n          yAxes: [{\n            stacked: true\n          }]\n        }\n      }\n    }\n\n    // init chart line stacked area\n    const canvas = $('#canvas-stacked-area')[0].getContext('2d')\n    let chart = new Chart(canvas, data)\n\n    // randomize data\n    $('#randomizeDataStackedArea').on('click', function (e) {\n      e.preventDefault()\n      data.data.datasets.forEach(function (dataset) {\n        dataset.data = dataset.data.map(function () {\n          return self.randomScalingFactor()\n        })\n      })\n      chart.update()\n    })\n\n    // add dataset\n    $('#addDatasetStackedArea').on('click', function (e) {\n      e.preventDefault()\n      if (data.data.datasets.length <= 8) {\n        const brandNames = self.colorBrandNames()\n        const colorName = brandNames[data.data.datasets.length % brandNames.length]\n        const newColor = Looper.getColors('brand')[colorName]\n        const newDataset = {\n          label: 'Dataset ' + data.data.datasets.length,\n          borderColor: newColor,\n          backgroundColor: newColor,\n          data: [],\n        }\n        for (let index = 0; index < data.data.labels.length; ++index) {\n          newDataset.data.push(self.randomScalingFactor())\n        }\n        data.data.datasets.push(newDataset)\n        chart.update()\n      }\n    })\n\n    // remove dataset\n    $('#removeDatasetStackedArea').on('click', function (e) {\n      e.preventDefault()\n      data.data.datasets.splice(0, 1)\n      chart.update()\n    })\n  }\n\n  lineStyles () {\n    const data = {\n      type: 'line',\n      data: {\n        labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        datasets: [{\n          label: 'Unfilled',\n          fill: false,\n          backgroundColor: Looper.colors.brand.blue,\n          borderColor: Looper.colors.brand.blue,\n          data: [\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor()\n          ],\n        }, {\n          label: 'Dashed',\n          fill: false,\n          backgroundColor: Looper.colors.brand.teal,\n          borderColor: Looper.colors.brand.teal,\n          borderDash: [5, 5],\n          data: [\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor()\n          ],\n        }, {\n          label: 'Filled',\n          backgroundColor: Looper.colors.brand.purple,\n          borderColor: Looper.colors.brand.purple,\n          data: [\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor()\n          ],\n          fill: true,\n        }]\n      },\n      options: {\n        title: {\n          display: true,\n          text: 'Line Styles'\n        },\n        tooltips: {\n          mode: 'index',\n          intersect: false,\n        },\n        hover: {\n          mode: 'nearest',\n          intersect: true\n        }\n      }\n    }\n    // init chart line styles\n    const canvas = $('#canvas-styles')[0].getContext('2d')\n    let chart = new Chart(canvas, data)\n  }\n\n  lineStepped () {\n    const data = {\n      type: 'line',\n      data: {\n        labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        datasets: [{\n          label: 'My First dataset',\n          borderColor: Looper.colors.brand.purple,\n          backgroundColor: Looper.colors.brand.purple,\n          data: [\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor()\n          ],\n          fill: false,\n          steppedLine: true,\n        }, {\n          label: 'My Second dataset',\n          steppedLine: true,\n          borderColor: Looper.colors.brand.teal,\n          backgroundColor: Looper.colors.brand.teal,\n          data: [\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor()\n          ],\n          fill: false,\n        }]\n      },\n      options: {\n        title: {\n          display: true,\n          text: 'Line Stepped'\n        },\n        tooltips: {\n          mode: 'index'\n        }\n      }\n    }\n    // init chart line stepped\n    const canvas = $('#canvas-stepped')[0].getContext('2d')\n    let chart = new Chart(canvas, data)\n  }\n\n  lineSkipPoint () {\n    const data = {\n      type: 'line',\n      data: {\n        labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        datasets: [{\n          label: 'My First dataset',\n          borderColor: Looper.colors.brand.purple,\n          fill: false,\n          // Skip a point in the middle\n          data: [\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            NaN,\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor()\n          ],\n\n        }, {\n          label: 'My Second dataset',\n          borderColor: Looper.colors.brand.teal,\n          fill: false,\n          // Skip first and last points\n          data: [\n            NaN,\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            NaN\n          ],\n        }]\n      },\n      options: {\n        title: {\n          display: true,\n          text: 'Skip Points'\n        },\n        tooltips: {\n          mode: 'index',\n        },\n        hover: {\n          mode: 'index'\n        }\n      }\n    }\n\n    // init chart line skip points\n    const canvas = $('#canvas-skip-points')[0].getContext('2d')\n    let chart = new Chart(canvas, data)\n  }\n\n  lineDifferentPointSizes () {\n    const data = {\n      type: 'line',\n      data: {\n        labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        datasets: [{\n          label: 'dataset - big points',\n          data: [\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor()\n          ],\n          backgroundColor: Looper.colors.brand.purple,\n          borderColor: Looper.colors.brand.purple,\n          fill: false,\n          borderDash: [5, 5],\n          pointRadius: 15,\n          pointHoverRadius: 10,\n        }, {\n          label: 'dataset - individual point sizes',\n          data: [\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor()\n          ],\n          backgroundColor: Looper.colors.brand.teal,\n          borderColor: Looper.colors.brand.teal,\n          fill: false,\n          borderDash: [5, 5],\n          pointRadius: [2, 4, 6, 18, 0, 12, 20],\n        }, {\n          label: 'dataset - large pointHoverRadius',\n          data: [\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor(),\n            this.randomScalingFactor()\n          ],\n          backgroundColor: Looper.colors.brand.blue,\n          borderColor: Looper.colors.brand.blue,\n          fill: false,\n          pointHoverRadius: 30,\n        }]\n      },\n      options: {\n        hover: {\n          mode: 'index'\n        },\n        title: {\n          display: true,\n          text: 'Different point sizes'\n        }\n      }\n    }\n\n    // init chart line different point sizes\n    const canvas = $('#canvas-different-point-sizes')[0].getContext('2d')\n    let chart = new Chart(canvas, data)\n  }\n\n  lineMultiAxis () {\n    const data = {\n      labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n      datasets: [{\n        label: 'My First dataset',\n        borderColor: Looper.colors.brand.purple,\n        backgroundColor: Looper.colors.brand.purple,\n        fill: false,\n        data: [\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor()\n        ],\n        yAxisID: 'y-axis-1',\n      }, {\n        label: 'My Second dataset',\n        borderColor: Looper.colors.brand.teal,\n        backgroundColor: Looper.colors.brand.teal,\n        fill: false,\n        data: [\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor(),\n          this.randomScalingFactor()\n        ],\n        yAxisID: 'y-axis-2'\n      }]\n    }\n\n    // init chart line multi axis\n    const canvas = $('#canvas-multi-axis')[0].getContext('2d')\n    let chart = Chart.Line(canvas, {\n      data: data,\n      options: {\n        hoverMode: 'index',\n        stacked: false,\n        title: {\n          display: true,\n          text: 'Multi Axis'\n        },\n        scales: {\n          yAxes: [{\n            type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\n            display: true,\n            position: 'left',\n            id: 'y-axis-1',\n          }, {\n            type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\n            display: true,\n            position: 'right',\n            id: 'y-axis-2',\n\n            // grid line settings\n            gridLines: {\n              drawOnChartArea: false, // only want the grid lines for one axis to show up\n            },\n          }],\n        }\n      }\n    })\n  }\n\n  lineInterpolation () {\n    const datapoints = [0, 20, 20, 60, 60, 120, NaN, 180, 120, 125, 105, 110, 170]\n    const data = {\n      type: 'line',\n      data: {\n        labels: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],\n        datasets: [{\n          label: 'Monotone',\n          data: datapoints,\n          borderColor: Looper.colors.brand.purple,\n          backgroundColor: Looper.colors.brand.purple,\n          fill: false,\n          cubicInterpolationMode: 'monotone'\n        }, {\n          label: 'Default',\n          data: datapoints,\n          borderColor: Looper.colors.brand.blue,\n          backgroundColor: Looper.colors.brand.blue,\n          fill: false,\n        }, {\n          label: 'Linear',\n          data: datapoints,\n          borderColor: Looper.colors.brand.teal,\n          backgroundColor: Looper.colors.brand.teal,\n          fill: false,\n          lineTension: 0\n        }]\n      },\n      options: {\n        legend: {\n          position: 'bottom'\n        },\n        title:{\n          display:true,\n          text:'Cubic interpolation mode'\n        },\n        tooltips: {\n          mode: 'index'\n        },\n        scales: {\n          yAxes: [{\n            ticks: {\n              suggestedMin: -10,\n              suggestedMax: 200,\n            }\n          }]\n        }\n      }\n    }\n\n    // init chart line multi axis\n    const canvas = $('#canvas-interpolation-modes')[0].getContext('2d')\n    let chart = new Chart(canvas, data)\n  }\n}\n\n\n/**\n * Keep in mind that your scripts may not always be executed after the theme is completely ready,\n * you might need to observe the `theme:load` event to make sure your scripts are executed after the theme is ready.\n */\n$(document).on('theme:init', () => {\n  new ChartjsLineDemo()\n})\n"]}